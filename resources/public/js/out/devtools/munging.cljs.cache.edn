{:rename-macros {}, :renames {}, :externs {Error {}, String {}, window {}}, :use-macros {safe-call devtools.util, oset devtools.util, oget devtools.util, ocall devtools.util}, :excludes #{}, :name devtools.munging, :imports nil, :requires {string clojure.string, clojure.string clojure.string, devtools.util devtools.util}, :uses nil, :defs {args-lists-to-strings {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 394, :column 7, :end-line 394, :end-column 28, :arglists (quote ([args-lists spacer-symbol multi-arity-symbol rest-symbol])), :doc "Converts a list of arguments lists into a list of strings suitable for UI presentation."}, :name devtools.munging/args-lists-to-strings, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 28, :method-params ([args-lists spacer-symbol multi-arity-symbol rest-symbol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 394, :end-line 394, :max-fixed-arity 4, :fn-var true, :arglists (quote ([args-lists spacer-symbol multi-arity-symbol rest-symbol])), :doc "Converts a list of arguments lists into a list of strings suitable for UI presentation."}, humanize-name {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 286, :column 7, :end-line 286, :end-column 20, :arglists (quote ([state name])), :doc "Given a name and intermediate state. Convert name to a human readable version by keeping human readable prefix with\n  optional subscribt postfix and store it in ::result. Subscript number is picked based on state. State keeps track of\n  previously assigned subscripts. Returns a new state."}, :name devtools.munging/humanize-name, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 20, :method-params ([state name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 286, :end-line 286, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state name])), :doc "Given a name and intermediate state. Convert name to a human readable version by keeping human readable prefix with\n  optional subscribt postfix and store it in ::result. Subscript number is picked based on state. State keeps track of\n  previously assigned subscripts. Returns a new state."}, find-index-of-human-prefix {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 272, :column 7, :end-line 272, :end-column 33, :arglists (quote ([name])), :doc "Given a demunged ClojureScript parameter name. Tries to detect human readable part and returns the index where it ends.\n  Returns nil if no prefix can be detected.\n\n  The idea is to convert macro-generated parameters and other generated names to more friendly names.\n  We observed that param names generated by gensym have prefix followed by big numbers.\n  Other generated names contain two dashes after prefix (originally probably using underscores)."}, :name devtools.munging/find-index-of-human-prefix, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 33, :method-params ([name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 272, :end-line 272, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name])), :doc "Given a demunged ClojureScript parameter name. Tries to detect human readable part and returns the index where it ends.\n  Returns nil if no prefix can be detected.\n\n  The idea is to convert macro-generated parameters and other generated names to more friendly names.\n  We observed that param names generated by gensym have prefix followed by big numbers.\n  Other generated names contain two dashes after prefix (originally probably using underscores)."}, make-subscript {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 54, :column 7, :end-line 54, :end-column 21, :arglists (quote ([subscript])), :doc "Given a subscript number converts it into a string representation consisting of unicode subscript characters (digits)."}, :name devtools.munging/make-subscript, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 21, :method-params ([subscript]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([subscript])), :doc "Given a subscript number converts it into a string representation consisting of unicode subscript characters (digits)."}, trivial-fn-source? {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 106, :column 7, :end-line 106, :end-column 25, :arglists (quote ([fn-source]))}, :name devtools.munging/trivial-fn-source?, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 25, :method-params ([fn-source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fn-source]))}, char-to-subscript {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 43, :column 7, :end-line 43, :end-column 24, :arglists (quote ([char])), :doc "Given a character with a single digit converts it into a subscript character.\n  Zero chracter maps to unicode 'SUBSCRIPT ZERO' (U+2080)."}, :name devtools.munging/char-to-subscript, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 24, :method-params ([char]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([char])), :doc "Given a character with a single digit converts it into a subscript character.\n  Zero chracter maps to unicode 'SUBSCRIPT ZERO' (U+2080)."}, present-fn-part {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 420, :column 7, :end-line 420, :end-column 22, :arglists (quote ([fn-ns fn-name include-ns?]))}, :name devtools.munging/present-fn-part, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 22, :method-params ([fn-ns fn-name include-ns?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 420, :end-line 420, :max-fixed-arity 3, :fn-var true, :arglists (quote ([fn-ns fn-name include-ns?]))}, collect-fn-arities {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 339, :column 7, :end-line 339, :end-column 25, :arglists (quote ([f])), :doc "Given a Javascript function object, tries to inspect known arity properties generated by ClojureScript compiler and\n  collects all available arity functions into a map. Arities are keyed by arity count and variadic arity gets ::variadic key."}, :name devtools.munging/collect-fn-arities, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 25, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 339, :end-line 339, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Given a Javascript function object, tries to inspect known arity properties generated by ClojureScript compiler and\n  collects all available arity functions into a map. Arities are keyed by arity count and variadic arity gets ::variadic key."}, arity-keywords-comparator {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 352, :column 7, :end-line 352, :end-column 32, :arglists (quote ([x y])), :doc "::variadic goes last, other keywords compare by name."}, :name devtools.munging/arity-keywords-comparator, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 32, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 352, :end-line 352, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc "::variadic goes last, other keywords compare by name."}, arities-key-comparator {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 360, :column 7, :end-line 360, :end-column 29, :arglists (quote ([x y])), :doc "numbers go first (ordered), then keywords (ordered by name), and then ::variadic sticks last"}, :name devtools.munging/arities-key-comparator, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 29, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 360, :end-line 360, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc "numbers go first (ordered), then keywords (ordered by name), and then ::variadic sticks last"}, get-fn-max-fixed-arity {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 40, :column 7, :end-line 40, :end-column 29, :arglists (quote ([f]))}, :name devtools.munging/get-fn-max-fixed-arity, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 29, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, common-protocol? {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 416, :column 7, :end-line 416, :end-column 23, :arglists (quote ([protocol-ns protocol-name]))}, :name devtools.munging/common-protocol?, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 23, :method-params ([protocol-ns protocol-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 416, :end-line 416, :max-fixed-arity 2, :fn-var true, :arglists (quote ([protocol-ns protocol-name]))}, break-munged-name {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 188, :column 7, :end-line 188, :end-column 24, :arglists (quote ([munged-name] [munged-name ns-detector])), :doc "Given a munged-name from Javascript lands attempts to break it into:\n  [fn-ns fn-name protocol-ns protocol-name protocol-method arity].\n\n  Protocol and arity elements are optional. Function elements are always present or \"\".\n\n  examples for input:\n    cljs$core$rest => ['cljs.core', 'rest']\n    cljs.core.reduce$cljs$core$IFn$_invoke$arity$3 => ['cljs.core' 'reduce' 'cljs.core' 'IFn' '_invoke' 3]", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([munged-name] [munged-name ns-detector]), :arglists ([munged-name] [munged-name ns-detector]), :arglists-meta (nil nil)}}, :name devtools.munging/break-munged-name, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([munged-name] [munged-name ns-detector]), :arglists ([munged-name] [munged-name ns-detector]), :arglists-meta (nil nil)}, :method-params ([munged-name] [munged-name ns-detector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 2, :fn-var true, :arglists ([munged-name] [munged-name ns-detector]), :doc "Given a munged-name from Javascript lands attempts to break it into:\n  [fn-ns fn-name protocol-ns protocol-name protocol-method arity].\n\n  Protocol and arity elements are optional. Function elements are always present or \"\".\n\n  examples for input:\n    cljs$core$rest => ['cljs.core', 'rest']\n    cljs.core.reduce$cljs$core$IFn$_invoke$arity$3 => ['cljs.core' 'reduce' 'cljs.core' 'IFn' '_invoke' 3]"}, present-function-name {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 431, :column 7, :end-line 431, :end-column 28, :arglists (quote ([munged-name options])), :doc "Given javascript function name tries to present it as plain string for display in UI on best effort basis."}, :name devtools.munging/present-function-name, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 28, :method-params ([munged-name options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 431, :end-line 431, :max-fixed-arity 2, :fn-var true, :arglists (quote ([munged-name options])), :doc "Given javascript function name tries to present it as plain string for display in UI on best effort basis."}, char-to-superscript {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 60, :column 7, :end-line 60, :end-column 26, :arglists (quote ([char])), :doc "Given a character with a single digit converts it into a superscript character.\n  Zero chracter maps to unicode 'SUPERSCRIPT ZERO' (U+2070)."}, :name devtools.munging/char-to-superscript, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 26, :method-params ([char]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([char])), :doc "Given a character with a single digit converts it into a superscript character.\n  Zero chracter maps to unicode 'SUPERSCRIPT ZERO' (U+2070)."}, get-fn-variadic-arity {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 37, :column 7, :end-line 37, :end-column 28, :arglists (quote ([f]))}, :name devtools.munging/get-fn-variadic-arity, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 28, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, demunge-ns {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 140, :column 7, :end-line 140, :end-column 17, :arglists (quote ([munged-name]))}, :name devtools.munging/demunge-ns, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 17, :method-params ([munged-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 1, :fn-var true, :arglists (quote ([munged-name]))}, parse-fn-source {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 91, :column 7, :end-line 91, :end-column 22, :arglists (quote ([fn-source])), :doc "Given a function source code parses out [name args]. Note that both strings are still munged.\n  Suitable for further processing.\n\n  For exampe for input below the function will return [\"devtools_sample$core$hello\" \"name, unused_param\"]:\n\n  function devtools_sample$core$hello(name, unused_param){\n    return [cljs.core.str(\"hello, \"),cljs.core.str(name),cljs.core.str(\"!\")].join('');\n  }\n  "}, :name devtools.munging/parse-fn-source, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 22, :method-params ([fn-source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fn-source])), :doc "Given a function source code parses out [name args]. Note that both strings are still munged.\n  Suitable for further processing.\n\n  For exampe for input below the function will return [\"devtools_sample$core$hello\" \"name, unused_param\"]:\n\n  function devtools_sample$core$hello(name, unused_param){\n    return [cljs.core.str(\"hello, \"),cljs.core.str(name),cljs.core.str(\"!\")].join('');\n  }\n  "}, ns-exists? {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 145, :column 7, :end-line 145, :end-column 17, :arglists (quote ([ns-module-name]))}, :name devtools.munging/ns-exists?, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 17, :method-params ([ns-module-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ns-module-name]))}, review-arities {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 331, :column 7, :end-line 331, :end-column 21, :arglists (quote ([arities])), :doc "Some arities can be marked as fixed arity but in fact point to a variadic-arity function. We want to detect this case\n  and turn such improperly categorized arities to ::variadic."}, :name devtools.munging/review-arities, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 21, :method-params ([arities]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 331, :end-line 331, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arities])), :doc "Some arities can be marked as fixed arity but in fact point to a variadic-arity function. We want to detect this case\n  and turn such improperly categorized arities to ::variadic."}, strip-arity {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 174, :column 7, :end-line 174, :end-column 18, :arglists (quote ([tokens]))}, :name devtools.munging/strip-arity, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 18, :method-params ([tokens]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 174, :end-line 174, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tokens]))}, arities-to-args-lists {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 381, :column 7, :end-line 381, :end-column 28, :arglists (quote ([arities & [humanize?]])), :doc "Given a map of arity functions. Tries to parse individual functions and prepare an arguments list for each arity.\n  Returned list of arguments list is sorted by arity count, variadic arity goes last if available.\n\n  The function also optionally humanizes argument names in each arguments list if requested.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(arities [humanize?])], :arglists ([arities & [humanize?]]), :arglists-meta (nil)}}, :name devtools.munging/arities-to-args-lists, :variadic true, :file "resources/public/js/out/devtools/munging.cljs", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(arities [humanize?])], :arglists ([arities & [humanize?]]), :arglists-meta (nil)}, :method-params [(arities [humanize?])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 381, :end-line 381, :max-fixed-arity 1, :fn-var true, :arglists ([arities & [humanize?]]), :doc "Given a map of arity functions. Tries to parse individual functions and prepare an arguments list for each arity.\n  Returned list of arguments list is sorted by arity count, variadic arity goes last if available.\n\n  The function also optionally humanizes argument names in each arguments list if requested."}, collect-fn-variadic-arities {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 321, :column 7, :end-line 321, :end-column 34, :arglists (quote ([f]))}, :name devtools.munging/collect-fn-variadic-arities, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 34, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 321, :end-line 321, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, get-fn-fixed-arity {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 34, :column 7, :end-line 34, :end-column 25, :arglists (quote ([f n]))}, :name devtools.munging/get-fn-fixed-arity, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 25, :method-params ([f n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f n]))}, dollar-replacement {:name devtools.munging/dollar-replacement, :file "resources/public/js/out/devtools/munging.cljs", :line 23, :column 1, :end-line 23, :end-column 24, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 23, :column 6, :end-line 23, :end-column 24}, :tag string}, detect-namespace-prefix {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 150, :column 7, :end-line 150, :end-column 30, :arglists (quote ([tokens & [ns-detector]])), :doc "Given a name broken into namespace parts returns [detected-ns remaining-parts],\n  where detected-ns is a string representing longest detected existing namespace and\n  remaining-parts is a vector of remaing input parts not included in the detected-ns concatenation.\n\n  For given input [\"cljs\" \"core\" \"first\"] returns [\"cljs.core\" [\"first\"]] (asumming cljs.core exists)", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(tokens [ns-detector])], :arglists ([tokens & [ns-detector]]), :arglists-meta (nil)}}, :name devtools.munging/detect-namespace-prefix, :variadic true, :file "resources/public/js/out/devtools/munging.cljs", :end-column 30, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(tokens [ns-detector])], :arglists ([tokens & [ns-detector]]), :arglists-meta (nil)}, :method-params [(tokens [ns-detector])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 1, :fn-var true, :arglists ([tokens & [ns-detector]]), :doc "Given a name broken into namespace parts returns [detected-ns remaining-parts],\n  where detected-ns is a string representing longest detected existing namespace and\n  remaining-parts is a vector of remaing input parts not included in the detected-ns concatenation.\n\n  For given input [\"cljs\" \"core\" \"first\"] returns [\"cljs.core\" [\"first\"]] (asumming cljs.core exists)"}, parse-fn-info-deep {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 251, :column 7, :end-line 251, :end-column 25, :arglists (quote ([f])), :doc "Given Javascript function object tries to retrieve [ns name & args] as in parse-fn-info (on best effort basis).\n\n  The difference from parse-fn-info is that this function prefers to read args from arities if available.\n  It recurses arbitrary deep following IFn protocol leads.\n\n  If we hit multi-arity situation in leaf, we don't attempt to list arguments and return ::multi-arity placeholder instead.\n\n  The reason for reading arities is that it gives more accurate parameter names in some cases.\n  We observed that variadic functions don't always contain original parameter names, but individual IFn arity functions do."}, :name devtools.munging/parse-fn-info-deep, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 25, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 251, :end-line 251, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Given Javascript function object tries to retrieve [ns name & args] as in parse-fn-info (on best effort basis).\n\n  The difference from parse-fn-info is that this function prefers to read args from arities if available.\n  It recurses arbitrary deep following IFn protocol leads.\n\n  If we hit multi-arity situation in leaf, we don't attempt to list arguments and return ::multi-arity placeholder instead.\n\n  The reason for reading arities is that it gives more accurate parameter names in some cases.\n  We observed that variadic functions don't always contain original parameter names, but individual IFn arity functions do."}, parse-fn-source-info {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 230, :column 7, :end-line 230, :end-column 27, :arglists (quote ([fn-source])), :doc "Given function source code tries to retrieve [ns name & args] on best effort basis, where\n  ns is demunged namespace part of the function name (or \"\" if namespace cannot be detected)\n  name is demunged short name (or \"\" if function is anonymous or name cannot be retrieved)\n  args is optional number of demunged argument names.\n\n  Please note that this function always returns a vector with something. In worst cases [\"\" \"\"].\n  "}, :name devtools.munging/parse-fn-source-info, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 27, :method-params ([fn-source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 230, :end-line 230, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fn-source])), :doc "Given function source code tries to retrieve [ns name & args] on best effort basis, where\n  ns is demunged namespace part of the function name (or \"\" if namespace cannot be detected)\n  name is demunged short name (or \"\" if function is anonymous or name cannot be retrieved)\n  args is optional number of demunged argument names.\n\n  Please note that this function always returns a vector with something. In worst cases [\"\" \"\"].\n  "}, arities-to-args-lists* {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 371, :column 7, :end-line 371, :end-column 29, :arglists (quote ([arities]))}, :name devtools.munging/arities-to-args-lists*, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 29, :method-params ([arities]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 371, :end-line 371, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arities]))}, cljs-fn-name? {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 83, :column 7, :end-line 83, :end-column 20, :arglists (quote ([munged-name])), :doc "Given a Javascript name answers if the name was likely generated by ClojureScript.\n  We use a simple heuristic here:\n    The name must contain at least two separate dollars because we assume two-segment namespaces."}, :name devtools.munging/cljs-fn-name?, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 20, :method-params ([munged-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([munged-name])), :doc "Given a Javascript name answers if the name was likely generated by ClojureScript.\n  We use a simple heuristic here:\n    The name must contain at least two separate dollars because we assume two-segment namespaces."}, break-and-demunge-name {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 213, :column 7, :end-line 213, :end-column 29, :arglists (quote ([munged-name] [munged-name ns-detector])), :doc "Given a munged-name from Javascript lands attempts to break it into a namespace part and remaining short name.\n  Then applies appropriate demunging on them and returns ClojureScript versions of the names.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([munged-name] [munged-name ns-detector]), :arglists ([munged-name] [munged-name ns-detector]), :arglists-meta (nil nil)}}, :name devtools.munging/break-and-demunge-name, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([munged-name] [munged-name ns-detector]), :arglists ([munged-name] [munged-name ns-detector]), :arglists-meta (nil nil)}, :method-params ([munged-name] [munged-name ns-detector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 2, :fn-var true, :arglists ([munged-name] [munged-name ns-detector]), :doc "Given a munged-name from Javascript lands attempts to break it into a namespace part and remaining short name.\n  Then applies appropriate demunging on them and returns ClojureScript versions of the names."}, collect-fn-fixed-arities {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 312, :column 7, :end-line 312, :end-column 31, :arglists (quote ([f max-arity]))}, :name devtools.munging/collect-fn-fixed-arities, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 31, :method-params ([f max-arity]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 312, :end-line 312, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f max-arity]))}, get-fn-source-safely {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 28, :column 7, :end-line 28, :end-column 27, :arglists (quote ([f]))}, :name devtools.munging/get-fn-source-safely, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 27, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, cljs-fn? {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 111, :column 7, :end-line 111, :end-column 15, :arglists (quote ([f])), :doc "Given a Javascript function object returns true if the function looks like a ClojureScript function.\n\n  Uses various heuristics:\n    1. must be fn? (is javascript function or satisfies Fn and IFn protocols)\n    2. and name must be cljs-fn-name? (name can come from f.name or parsed out of function source)\n    3. or if anonymous function, must be non-trivial"}, :name devtools.munging/cljs-fn?, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 15, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Given a Javascript function object returns true if the function looks like a ClojureScript function.\n\n  Uses various heuristics:\n    1. must be fn? (is javascript function or satisfies Fn and IFn protocols)\n    2. and name must be cljs-fn-name? (name can come from f.name or parsed out of function source)\n    3. or if anonymous function, must be non-trivial"}, parse-fn-info {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 245, :column 7, :end-line 245, :end-column 20, :arglists (quote ([f])), :doc "Given Javascript function object tries to retrieve [ns name & args] as in parse-fn-source-info (on best effort basis)."}, :name devtools.munging/parse-fn-info, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 20, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 245, :end-line 245, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Given Javascript function object tries to retrieve [ns name & args] as in parse-fn-source-info (on best effort basis)."}, make-superscript {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 75, :column 7, :end-line 75, :end-column 23, :arglists (quote ([superscript])), :doc "Given a superscript number converts it into a string representation consisting of unicode superscript characters (digits)."}, :name devtools.munging/make-superscript, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 23, :method-params ([superscript]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([superscript])), :doc "Given a superscript number converts it into a string representation consisting of unicode superscript characters (digits)."}, normalize-arity {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 167, :column 7, :end-line 167, :end-column 22, :arglists (quote ([arity-tokens]))}, :name devtools.munging/normalize-arity, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 22, :method-params ([arity-tokens]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arity-tokens]))}, present-protocol-part {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 425, :column 7, :end-line 425, :end-column 28, :arglists (quote ([protocol-ns protocol-name protocol-method include-protocol-ns?]))}, :name devtools.munging/present-protocol-part, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 28, :method-params ([protocol-ns protocol-name protocol-method include-protocol-ns?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 425, :end-line 425, :max-fixed-arity 4, :fn-var true, :arglists (quote ([protocol-ns protocol-name protocol-method include-protocol-ns?]))}, parse-protocol {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 178, :column 7, :end-line 178, :end-column 21, :arglists (quote ([tokens detector]))}, :name devtools.munging/parse-protocol, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 21, :method-params ([tokens detector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tokens detector]))}, humanize-names {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 301, :column 7, :end-line 301, :end-column 21, :arglists (quote ([names])), :doc "Given a list of names, returns a list of human-readable versions of those names.\n  It detects human-readable prefix using a simple heuristics. When names repeat it assigns simple subscripts starting with 2.\n  Subscripts are assigned left-to-right.\n\n  Given [\"p--a\" \"p--b\" \"x\" \"p--c\"] returns [\"p\" \"p₂\" \"x\" \"p₃\"]"}, :name devtools.munging/humanize-names, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 21, :method-params ([names]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 301, :end-line 301, :max-fixed-arity 1, :fn-var true, :arglists (quote ([names])), :doc "Given a list of names, returns a list of human-readable versions of those names.\n  It detects human-readable prefix using a simple heuristics. When names repeat it assigns simple subscripts starting with 2.\n  Subscripts are assigned left-to-right.\n\n  Given [\"p--a\" \"p--b\" \"x\" \"p--c\"] returns [\"p\" \"p₂\" \"x\" \"p₃\"]"}, review-arity {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 325, :column 7, :end-line 325, :end-column 19, :arglists (quote ([[arity arity-fn]]))}, :name devtools.munging/review-arity, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 19, :method-params ([p__28765]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 325, :end-line 325, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[arity arity-fn]]))}, extract-args-strings {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 411, :column 7, :end-line 411, :end-column 27, :arglists (quote ([f humanize? spacer-symbol multi-arity-symbol rest-symbol]))}, :name devtools.munging/extract-args-strings, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 27, :method-params ([f humanize? spacer-symbol multi-arity-symbol rest-symbol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 411, :end-line 411, :max-fixed-arity 5, :fn-var true, :arglists (quote ([f humanize? spacer-symbol multi-arity-symbol rest-symbol]))}, dollar-preserving-demunge {:protocol-inline nil, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 131, :column 7, :end-line 131, :end-column 32, :arglists (quote ([munged-name])), :doc "Standard cljs.core/demunge is too agresive in replacing dollars.\n  This wrapper function works around it by leaving dollars intact."}, :name devtools.munging/dollar-preserving-demunge, :variadic false, :file "resources/public/js/out/devtools/munging.cljs", :end-column 32, :method-params ([munged-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([munged-name])), :doc "Standard cljs.core/demunge is too agresive in replacing dollars.\n  This wrapper function works around it by leaving dollars intact."}, max-fixed-arity-to-scan {:name devtools.munging/max-fixed-arity-to-scan, :file "resources/public/js/out/devtools/munging.cljs", :line 24, :column 1, :end-line 24, :end-column 29, :meta {:file "/Users/paulbunkham/Documents/Projects/Clojure/quil/hello-quil/resources/public/js/out/devtools/munging.cljs", :line 24, :column 6, :end-line 24, :end-column 29}, :tag number}}, :require-macros {devtools.util devtools.util}, :cljs.analyzer/constants {:seen #{:devtools.munging/variadic :else :include-protocol-ns? :ns-detector :naked :devtools.munging/multi-arity :silence-common-protocols? :include-ns? :devtools.munging/result}, :order [:devtools.munging/multi-arity :devtools.munging/result :devtools.munging/variadic :else :naked :include-ns? :include-protocol-ns? :silence-common-protocols? :ns-detector]}, :doc "This namespace implements various heuristics to map Javascript names back to corresponding ClojureScript names.\n  The functionality here heavily depends on observed ClojureScript compiler and runtime behaviour (fragile!).\n  Answers given by functions in this namespace cannot be perfect because generated Javascript naming schemes produced by\n  ClojureScript compiler were not designed with easy reversibility in mind. We recommend this functionality to be used for\n  presentation in the UI only. The goal here is to provide user with more familiar view of runtime state of her app\n  in most common cases (on best effort basis).\n\n  Our main weapons in this uneven fight are:\n    1. munged function names as they appear in Javascript (generated by ClojureScript)\n    2. we can also analyze function sources accessible via .toString\n    3. special cljs$core$IFn$_invoke protocol props generated for multi-arity functions\n\n  We can also cheat and look at runtime state of browser environment to determine some answers about namespaces.\n\n  If you discovered breakage or a new case which should be covered by this code, please open an issue:\n    https://github.com/binaryage/cljs-devtools/issues"}